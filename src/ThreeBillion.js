/*
** 3Billion -- root component of the 3 Billion and Me project
** Copyright (C) 2022-2022 Tactile Interactive, all rights reserved
*/
/* eslint-disable no-unused-vars, eqeqeq, no-restricted-globals */

import React, {useState} from 'react';
import PropTypes from 'prop-types';

import './ThreeBillion.scss';
import AGenome from './genome/AGenome.js';
import AChromo from './chromo/AChromo.js';
import AnArm from './arm/AnArm.js';
import AGene from './gene/AGene.js';

import genome from './genome/genome.js';
import chromo from './chromo/chromo.js';
import arm from './arm/arm.js';
import gene from './gene/gene.js';
import codon from './codon/codon.js';

import formulate from './formulate.js';

const narrowQueryList = window.matchMedia("(max-width: 800px)");

// attach hooks setters here so I can use them in these functions out here.
let setters = {};

// the panelDesc stack has the models the user is viewing.
// The screen components are driven from the models.
let panelDescStack = [];

const getCurrentPanelDesc =
() => panelDescStack.at(-1);


/* ************************************** patient */

const patients = [
	{name: 'Alan Shepard', gender: 'xy'},
	{name: 'Alexander Gerst', gender: 'xy'},
	{name: 'Alexei Leonov ', gender: 'xy'},
	{name: 'Buzz Aldrin', gender: 'xy'},
	{name: 'Christa McAuliffe', gender: 'xx'},
	{name: 'Frank Borman', gender: 'xy'},
	{name: 'Haisheng Nie', gender: 'xy'},
	{name: 'Jeanette J. Epps', gender: 'xx'},
	{name: 'Jessica Ulrika "Goose" Meir', gender: 'xx'},
	{name: 'John Glenn', gender: 'xy'},
	{name: 'John Young', gender: 'xy'},
	{name: 'Judith Resnik', gender: 'xx'},
	{name: 'Koichi Wakata', gender: 'xy'},
	{name: 'Michael Collins ', gender: 'xy'},
	{name: 'Neil Armstrong', gender: 'xy', selected: true},
	{name: 'Sally Ride', gender: 'xx'},
	{name: 'Svetlana Savitskaya', gender: 'xx'},
	{name: 'Thomas Gautier Pesquet', gender: 'xy'},
	{name: 'Valentina Tereshkova', gender: 'xx'},
	{name: 'Yelena Vladimirovna Kondakova', gender: 'xx'},
	{name: 'Yuri Gagarin', gender: 'xy'},
];

const defaultPatientIndex = 14;

// user chooses new patient from menu
function setNewPatient(patientIndex) {
	if (setters.setPatientIndex)
		setters.setPatientIndex(patientIndex);
	let thePatient = patients[patientIndex];

	// set up the fake data
	let theGenome = new genome(thePatient.name, formulate(thePatient.name), thePatient.gender);
	theGenome.populate();
	panelDescStack = [
		{level: 'genome', model: theGenome},
	];
}
// the default
setNewPatient(defaultPatientIndex);


/* ************************************** navigation */


// 0 = not changing panels.  -1 means going up.  +1 = going down (longer stack).
let navigationDirection = 0;

// user clicks on some element in some panel,
// and this takes them there.  Two ways to call: with one panelDesc,
// or with individual components
export function navigateIn(deeperPanelDesc, model) {
	if (typeof deeperPanelDesc == 'string')
		deeperPanelDesc = {level: deeperPanelDesc, model};

	panelDescStack.push(deeperPanelDesc);
	setters.setRightPanelDesc(deeperPanelDesc);
	navigationDirection = 1;
}

// user ... clicks on '< genome' or whatever button
export function navigateOut() {
	panelDescStack.pop();
	setters.setLeftPanelDesc(getCurrentPanelDesc());
	// but don't set the central panel descriptor, that's where we are.
	navigationDirection = -1;
}


/* ************************************** components */

// only appears on the Genome screen
function Header(props) {
	let patientIndex = props.patientIndex;
	let thePatient = patients[patientIndex];

	let patientOptions = patients.map((pat, ix) =>
		<option value={ix} key={ix}>
			{pat.name}, {pat.gender}
		</option>
	);

	return (
		<header>
			<h1>
				<img src='chromosome.png' alt='logo' />
				3 Billion And Me
			</h1>
			<p>
				A demo chromosome browser. &nbsp;
				<span style={{color: '#c00'}}>Warning: fake data,
					generated by a pseudo-random number generator</span>
			</p>
			choose patient:
			<select value={patientIndex} value={patientIndex}
				onChange={ev => setNewPatient(ev.target.value)} >
				{patientOptions}
			</select>

			<br clear='left' />
		</header>
	);
}
Header.propTypes = {
	patientIndex: PropTypes.number.isRequired,
};

// make the panel that the user clicked to.
// Doesn't even use the key - should get rid of it
// position: 0 for current panel, -1 or +1 if in transition
function panelFactory(panelDesc, patientIndex, position) {

	let style = {};
	if (position) {
		if (narrowQueryList.matches) {
			// mobile
			style.position = 'relative';
			if (position < 0)
				style.right = screen.width;
			else if (position > 0)
				style.left = screen.width;
		}
	}

	// let currentPanelDesc = getCurrentPanelDesc();
	// console.info(`panelFactory: currentPanelDesc, panelDescStack: `, currentPanelDesc, panelDescStack);

	switch (panelDesc.level) {
		case 'genome':
			return <div  className='viewingPanel' key='genome' style={style} >
				<Header patientIndex={patientIndex} key='header'/>
				<hr key='hr'/>
				<AGenome theGenome={panelDesc.model} key='AGenome' />
			</div>;

		case 'chromo':
			return <AChromo theChromo={panelDesc.model} key='chromo' style={style} />;

		case 'arm':
			return <AnArm theArm={panelDesc.model} key='arm' style={style} />;

		case 'gene':
			return <AGene theGene={panelDesc.model} key='gene' style={style} />;

		default: throw new Error(`bad panelDesc.level: ${panelDesc.level}`);
	}
}


function ThreeBillion(props) {
	let [patientIndex, setPatientIndex] = useState(defaultPatientIndex);

	// current panel being displayed, an item on panelDescStack
	// is this good as a default panelDesc?
	let [panelDesc, setPanelDesc] = useState(panelDescStack[0]);
	//let [panelDesc, setPanelDesc] = useState(getCurrentPanelDesc());

	// next panel we're transitioning to.  If we're transitioning,
	// one panel up/down from current panel.  If we're not, null.
	let [leftPanelDesc, setLeftPanelDesc] = useState(null);
	let [rightPanelDesc, setRightPanelDesc] = useState(null);

	setters = {setPatientIndex, setLeftPanelDesc, setPanelDesc, setRightPanelDesc};

	let viewingPanels;

	if (narrowQueryList.matches) {
		// upright iPhone
		viewingPanels = [, panelFactory(panelDesc, patientIndex, 0), ];
		if (leftPanelDesc) {
			viewingPanels[0] = panelFactory(leftPanelDesc, patientIndex, -1);
		}
		else if (rightPanelDesc) {
			viewingPanels[2] = panelFactory(rightPanelDesc, patientIndex, +1);
		}
	}
	else {
		// desktop (maybe?)
		viewingPanels = panelDescStack.map((panelDef, ix) => {
			return [
				<hr />,
				panelFactory(panelDef, patientIndex, ix)
			];
		});
	}


	return (<>

		<main className="ThreeBillion" id='Main' >
			{viewingPanels}
		</main>
	</>);
}

export default ThreeBillion;

